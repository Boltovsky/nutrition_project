from django.utils import timezone
from datetime import datetime, date
from nutrition_app.models import UserMealPlan, CustomUser
from nutrition_app.views.utils import _adjust_portion
from asgiref.sync import sync_to_async


@sync_to_async
def get_user_meal_plan_for_date_async(user, target_date):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    return get_user_meal_plan_for_date(user, target_date)


@sync_to_async
def get_first_user_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return CustomUser.objects.first()


def get_user_meal_plan_for_date(user, target_date):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–∞—Ç—É"""
    try:
        meal_plans = UserMealPlan.objects.filter(
            user=user,
            date=target_date
        ).select_related('recipe')

        result = []
        total_calories = 0
        total_protein = 0
        total_fat = 0
        total_carbs = 0

        for plan in meal_plans:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –ø–æ—Ä—Ü–∏–∏ –∫ —Ä–µ—Ü–µ–ø—Ç—É
            if plan.portion_multiplier != 1.0:
                adjusted_recipe = _adjust_portion(
                    plan.recipe, float(plan.portion_multiplier))
                calories = adjusted_recipe.calories
                protein = float(adjusted_recipe.protein)
                fat = float(adjusted_recipe.fat)
                carbs = float(adjusted_recipe.carbs)
                description = f"{adjusted_recipe.name} ({plan.portion_multiplier} –ø–æ—Ä—Ü.)"
            else:
                calories = plan.recipe.calories
                protein = float(plan.recipe.protein)
                fat = float(plan.recipe.fat)
                carbs = float(plan.recipe.carbs)
                description = plan.recipe.name

            result.append({
                'meal_type': plan.meal_type,
                'description': description,
                'calories': calories,
                'protein': protein,
                'fat': fat,
                'carbs': carbs,
                'recipe': plan.recipe
            })

            total_calories += calories
            total_protein += protein
            total_fat += fat
            total_carbs += carbs

        return result, total_calories, total_protein, total_fat, total_carbs

    except Exception as e:
        print(f"Error getting user meal plan: {e}")
        return [], 0, 0, 0, 0


async def generate_personal_menu_message_async(user, target_date):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
    meal_entries, total_calories, total_protein, total_fat, total_carbs = await get_user_meal_plan_for_date_async(user, target_date)

    if not meal_entries:
        return f"üçΩÔ∏è –ù–∞ {target_date.strftime('%d.%m.%Y')} —É –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.\n\n–ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω!"

    message = f"üçΩÔ∏è –í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ {target_date.strftime('%d.%m.%Y')}:\n\n"

    meal_types = {
        'breakfast': 'ü•£ –ó–∞–≤—Ç—Ä–∞–∫',
        'lunch': 'üçó –û–±–µ–¥',
        'dinner': 'üêü –£–∂–∏–Ω',
        'snack': 'üçé –ü–µ—Ä–µ–∫—É—Å'
    }

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    meals_dict = {}
    for entry in meal_entries:
        if entry['meal_type'] not in meals_dict:
            meals_dict[entry['meal_type']] = []
        meals_dict[entry['meal_type']].append(entry)

    # –í—ã–≤–æ–¥–∏–º –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    for meal_type in ['breakfast', 'lunch', 'snack', 'dinner']:
        if meal_type in meals_dict:
            meal_name = meal_types.get(meal_type, 'üìù –ü—Ä–∏–µ–º –ø–∏—â–∏')
            message += f"**{meal_name}:**\n"

            for entry in meals_dict[meal_type]:
                message += f"‚Ä¢ {entry['description']} - {entry['calories']} –∫–∫–∞–ª\n"

            message += "\n"

    # –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å
    message += f"üìä **–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:**\n"
    message += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {total_calories} –∫–∫–∞–ª\n"
    message += f"‚Ä¢ –ë–µ–ª–∫–∏: {total_protein:.1f}–≥\n"
    message += f"‚Ä¢ –ñ–∏—Ä—ã: {total_fat:.1f}–≥\n"
    message += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f}–≥\n\n"
    message += "üí° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, –∑–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç"

    return message


def generate_personal_menu_message(user, target_date):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    meal_entries, total_calories, total_protein, total_fat, total_carbs = get_user_meal_plan_for_date(
        user, target_date)

    if not meal_entries:
        return f"üçΩÔ∏è –ù–∞ {target_date.strftime('%d.%m.%Y')} —É –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.\n\n–ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω!"

    message = f"üçΩÔ∏è –í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ {target_date.strftime('%d.%m.%Y')}:\n\n"

    meal_types = {
        'breakfast': 'ü•£ –ó–∞–≤—Ç—Ä–∞–∫',
        'lunch': 'üçó –û–±–µ–¥',
        'dinner': 'üêü –£–∂–∏–Ω',
        'snack': 'üçé –ü–µ—Ä–µ–∫—É—Å'
    }

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    meals_dict = {}
    for entry in meal_entries:
        if entry['meal_type'] not in meals_dict:
            meals_dict[entry['meal_type']] = []
        meals_dict[entry['meal_type']].append(entry)

    # –í—ã–≤–æ–¥–∏–º –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    for meal_type in ['breakfast', 'lunch', 'snack', 'dinner']:
        if meal_type in meals_dict:
            meal_name = meal_types.get(meal_type, 'üìù –ü—Ä–∏–µ–º –ø–∏—â–∏')
            message += f"**{meal_name}:**\n"

            for entry in meals_dict[meal_type]:
                message += f"‚Ä¢ {entry['description']} - {entry['calories']} –∫–∫–∞–ª\n"

            message += "\n"

    # –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å
    message += f"üìä **–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:**\n"
    message += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {total_calories} –∫–∫–∞–ª\n"
    message += f"‚Ä¢ –ë–µ–ª–∫–∏: {total_protein:.1f}–≥\n"
    message += f"‚Ä¢ –ñ–∏—Ä—ã: {total_fat:.1f}–≥\n"
    message += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f}–≥\n\n"
    message += "üí° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, –∑–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç"

    return message


def save_weekly_plan_to_db(user, weekly_plan):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–∑ —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –Ω–µ–¥–µ–ª–∏ (—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        today = timezone.now().date()
        start_of_week = today - \
            timezone.timedelta(days=today.weekday())  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫

        date_mapping = {
            'monday': start_of_week,
            'tuesday': start_of_week + timezone.timedelta(days=1),
            'wednesday': start_of_week + timezone.timedelta(days=2),
            'thursday': start_of_week + timezone.timedelta(days=3),
            'friday': start_of_week + timezone.timedelta(days=4),
            'saturday': start_of_week + timezone.timedelta(days=5),
            'sunday': start_of_week + timezone.timedelta(days=6),
        }

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–∞–Ω—ã –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
        dates = list(date_mapping.values())
        UserMealPlan.objects.filter(user=user, date__in=dates).delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø–ª–∞–Ω—ã
        for day_key, day_data in weekly_plan.items():
            target_date = date_mapping.get(day_key)
            if not target_date:
                continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤—Ç—Ä–∞–∫
            if day_data.get('breakfast_id'):
                UserMealPlan.objects.create(
                    user=user,
                    date=target_date,
                    meal_type='breakfast',
                    recipe_id=day_data['breakfast_id'],
                    portion_multiplier=day_data.get(
                        'breakfast_multiplier', 1.0)
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–µ–¥
            if day_data.get('lunch_id'):
                UserMealPlan.objects.create(
                    user=user,
                    date=target_date,
                    meal_type='lunch',
                    recipe_id=day_data['lunch_id'],
                    portion_multiplier=day_data.get('lunch_multiplier', 1.0)
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–∫—É—Å
            if day_data.get('snack_id'):
                UserMealPlan.objects.create(
                    user=user,
                    date=target_date,
                    meal_type='snack',
                    recipe_id=day_data['snack_id'],
                    portion_multiplier=day_data.get('snack_multiplier', 1.0)
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–∏–Ω
            if day_data.get('dinner_id'):
                UserMealPlan.objects.create(
                    user=user,
                    date=target_date,
                    meal_type='dinner',
                    recipe_id=day_data['dinner_id'],
                    portion_multiplier=day_data.get('dinner_multiplier', 1.0)
                )

        return True
    except Exception as e:
        print(f"Error saving weekly plan to DB: {e}")
        return False
