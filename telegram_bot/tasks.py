from celery import shared_task
from nutrition_app.models import TelegramUser, UserMealPlan, UserNotificationSettings
from telegram_bot.bot import application
from telegram_bot.time_utils import is_reminder_time
from asgiref.sync import sync_to_async
import asyncio


@shared_task
def check_all_reminders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    print("üéØ Celery: –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")

    telegram_users = TelegramUser.objects.select_related(
        'user', 'user__notification_settings'
    ).all()

    print(f"üîç –í–°–ï–ì–û Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {telegram_users.count()}")

    for telegram_user in telegram_users:
        try:
            print(
                f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º: {telegram_user.user.username} (ID: {telegram_user.telegram_id})")

            settings = telegram_user.user.notification_settings

            if not settings.is_subscribed:
                print("   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
                continue

            # –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if is_reminder_time(telegram_user.user, 'morning') and settings.send_morning_reminder:
                print(f"   üì® –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–¢–†–ï–ù–ù–ï–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                asyncio.run(send_morning_reminder_async(telegram_user))

            # –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if is_reminder_time(telegram_user.user, 'evening') and settings.send_evening_reminder:
                print(f"   üì® –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í–ï–ß–ï–†–ù–ï–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                asyncio.run(send_evening_reminder_async(telegram_user))

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É {telegram_user.user.username}: {e}")

    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")


async def send_morning_reminder_async(telegram_user):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        from django.utils import timezone

        today = timezone.now().date()

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
        meal_plans = await sync_to_async(list)(
            UserMealPlan.objects.filter(
                user=telegram_user.user,
                date=today
            ).select_related('recipe')
        )

        if meal_plans:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            message = generate_daily_menu_message(meal_plans, today)
        else:
            # –ï—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç - –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å
            message = (
                f"üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*\n\n"
                f"–ù–∞ {today.strftime('%d.%m.%Y')} —É –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.\n\n"
                f"–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π! üí™\n\n"
                f"*–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n"
                f"/menu - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é\n"
                f"/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            )

        await send_telegram_message_async(telegram_user.chat_id, message)
        print(
            f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {telegram_user.user.username}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def send_evening_reminder_async(telegram_user):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        message = (
            "üåô *–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!*\n\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –¥–Ω–µ–≤–Ω–∏–∫! üìù\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n"
            "/menu - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –º–µ–Ω—é\n"
            "/notifications - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n"
            "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! üò¥"
        )

        await send_telegram_message_async(telegram_user.chat_id, message)
        print(
            f"‚úÖ –í–µ—á–µ—Ä–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {telegram_user.user.username}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def send_telegram_message_async(chat_id, message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        await application.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='Markdown'
        )
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")


def generate_daily_menu_message(meal_plans, date):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å"""
    message = f"üçΩÔ∏è *–í–∞—à–µ –º–µ–Ω—é –Ω–∞ {date.strftime('%d.%m.%Y')}:*\n\n"

    meal_types = {
        'breakfast': 'ü•£ –ó–∞–≤—Ç—Ä–∞–∫',
        'lunch': 'üçó –û–±–µ–¥',
        'dinner': 'üêü –£–∂–∏–Ω',
        'snack': 'üçé –ü–µ—Ä–µ–∫—É—Å'
    }

    total_calories = 0

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    meals_dict = {}
    for plan in meal_plans:
        if plan.meal_type not in meals_dict:
            meals_dict[plan.meal_type] = []

        description = plan.recipe.name
        if plan.portion_multiplier != 1.0:
            description += f" ({plan.portion_multiplier} –ø–æ—Ä—Ü.)"

        calories = plan.recipe.calories * float(plan.portion_multiplier)
        meals_dict[plan.meal_type].append({
            'description': description,
            'calories': calories
        })

        total_calories += calories

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for meal_type in ['breakfast', 'lunch', 'snack', 'dinner']:
        if meal_type in meals_dict:
            meal_name = meal_types.get(meal_type, 'üìù –ü—Ä–∏–µ–º –ø–∏—â–∏')
            message += f"*{meal_name}:*\n"

            for item in meals_dict[meal_type]:
                message += f"‚Ä¢ {item['description']} - {int(item['calories'])} –∫–∫–∞–ª\n"

            message += "\n"

    message += f"üìä *–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:* {int(total_calories)} –∫–∫–∞–ª\n\n"
    message += "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üç¥\n\n"
    message += "*–ö–æ–º–∞–Ω–¥—ã:* /menu - –æ–±–Ω–æ–≤–∏—Ç—å, /notifications - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"

    return message


async def send_telegram_message_async(chat_id, message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        await application.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='Markdown'
        )
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")


@shared_task
def check_all_reminders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    print("üéØ Celery: –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")

    telegram_users = TelegramUser.objects.select_related(
        'user', 'user__notification_settings'
    ).all()

    print(f"üîç –í–°–ï–ì–û Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {telegram_users.count()}")

    active_users = 0
    for telegram_user in telegram_users:
        try:
            print(
                f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º: {telegram_user.user.username} (ID: {telegram_user.telegram_id})")

            settings = telegram_user.user.notification_settings

            if not settings.is_subscribed:
                print("   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
                continue

            active_users += 1

            # –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            morning_time = is_reminder_time(telegram_user.user, 'morning')
            print(f"   üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è: {morning_time}")

            if morning_time and settings.send_morning_reminder:
                print(f"   üì® –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–¢–†–ï–ù–ù–ï–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!")
                asyncio.run(send_morning_reminder_async(telegram_user))

            # –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            evening_time = is_reminder_time(telegram_user.user, 'evening')
            print(f"   üåô –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è: {evening_time}")

            if evening_time and settings.send_evening_reminder:
                print(f"   üì® –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í–ï–ß–ï–†–ù–ï–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!")
                asyncio.run(send_evening_reminder_async(telegram_user))

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É {telegram_user.user.username}: {e}")

    print(f"‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}")


