from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from django.utils import timezone
import datetime
from .utils import generate_personal_menu_message
from asgiref.sync import sync_to_async


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user

    keyboard = [
        [InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                              callback_data="today_menu")],
        [InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫",
                              callback_data="open_diary")],
        [InlineKeyboardButton("‚ÑπÔ∏è  –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üçè\n\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é!\n"
        "–Ø –º–æ–≥—É:\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏\n\n"
        "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/menu - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/diary - –û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "today_menu":
        await show_today_menu(update, context)
    elif query.data == "tomorrow_menu":
        await show_tomorrow_menu(update, context)
    elif query.data == "open_diary":
        await open_diary_link(update, context)
    elif query.data == "help":
        await show_help(update, context)
    elif query.data == "main_menu":
        await main_menu(update, context)
    elif query.data == "open_site_info":
        await show_site_info(update, context)


async def show_today_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = timezone.now().date()

    try:
        from .utils import generate_personal_menu_message_async, get_first_user_async

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_first_user_async()

        if user:
            menu_message = await generate_personal_menu_message_async(user, today)
        else:
            menu_message = "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ."

    except Exception as e:
        menu_message = f"üçΩÔ∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–µ–≥–æ –º–µ–Ω—é: {e}"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="today_menu")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û —Å–∞–π—Ç–µ", callback_data="open_site_info")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(menu_message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(menu_message, reply_markup=reply_markup, parse_mode='Markdown')


async def find_telegram_user(telegram_id):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    from nutrition_app.models import TelegramUser
    try:
        return TelegramUser.objects.get(telegram_id=telegram_id)
    except TelegramUser.DoesNotExist:
        return None


@sync_to_async
def find_telegram_user_async(telegram_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    from nutrition_app.models import TelegramUser
    try:
        return TelegramUser.objects.get(telegram_id=telegram_id)
    except TelegramUser.DoesNotExist:
        return None


async def show_tomorrow_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    tomorrow = timezone.now().date() + datetime.timedelta(days=1)

    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –º–µ–Ω—é
    from django.contrib.auth.models import User
    try:
        user = User.objects.first()
        menu_message = generate_personal_menu_message(user, tomorrow)
    except:
        menu_message = f"üçΩÔ∏è –ú–µ–Ω—é –Ω–∞ {tomorrow.strftime('%d.%m.%Y')}:\n\n–î–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!"

    keyboard = [
        [InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                              callback_data="today_menu")],
        [InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫",
                              callback_data="open_diary")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(menu_message, reply_markup=reply_markup)


async def open_diary_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫"""
    today = timezone.now().date()

    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - localhost
    diary_url = f"http://localhost:8000/diary/?date={today}"

    keyboard = [
        # [InlineKeyboardButton("üìÖ –û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫", url=diary_url)],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {today.strftime('%d.%m.%Y')}:",
        reply_markup=reply_markup
    )


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    message = (
        "ü§ñ Nutrition Bot Help\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º:\n\n"
        "üìÖ **–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è** - –ø–æ—Å–º–æ—Ç—Ä–∏ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è\n"
        "üìñ **–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è** - –æ—Ç–∫—Ä–æ–π –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–Ω–µ–≤–Ω–∏–∫–∞\n"
        "üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** - —Å–∫–æ—Ä–æ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π /start"
    )

    keyboard = [
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(message, reply_markup=reply_markup)


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                              callback_data="today_menu")],
        [InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫",
                              callback_data="open_diary")],
        [InlineKeyboardButton("‚ÑπÔ∏è  –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        "üçè –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Nutrition Bot:",
        reply_markup=reply_markup
    )


async def show_site_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ"""
    message = (
        "üåê **–î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É:**\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000\n"
        "2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ\n"
        "3. –°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
        "4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
        "üì± *–°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ*"
    )

    keyboard = [
        [InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                              callback_data="today_menu")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
