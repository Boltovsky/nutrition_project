from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from django.utils import timezone
import datetime
from asgiref.sync import sync_to_async
import asyncio

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                              callback_data="today_menu")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                              callback_data="settings")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]

    message = (
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üçè\n\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é!\n"
        "–Ø –º–æ–≥—É:\n‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏\n‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
    )

    await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    message = (
        "ü§ñ *Nutrition Bot Help*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/menu - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/id - –í–∞—à Telegram ID\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    await _send_or_edit_message(update, message, parse_mode='Markdown')


async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message = (
        f"üë§ *–í–∞—à–∏ ID:*\n\n"
        f"*Telegram ID:* `{update.effective_user.id}`\n"
        f"*Chat ID:* `{update.effective_chat.id}`\n\n"
        f"‚ö†Ô∏è *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

# ===== –ú–ï–ù–Æ –ü–ò–¢–ê–ù–ò–Ø =====


async def show_today_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await _show_menu_for_date(update, timezone.now().date(), "today_menu")


async def show_tomorrow_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    tomorrow = timezone.now().date() + datetime.timedelta(days=1)
    await _show_menu_for_date(update, tomorrow, "tomorrow_menu")


async def _show_menu_for_date(update: Update, date, callback_data):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –Ω–∞ –¥–∞—Ç—É"""
    try:
        from .utils import generate_personal_menu_message_async, get_first_user_async
        user = await get_first_user_async()
        menu_message = await generate_personal_menu_message_async(user, date) if user else "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    except Exception as e:
        menu_message = f"üçΩÔ∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=callback_data)],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    await _send_or_edit_message(update, menu_message, keyboard, parse_mode='Markdown')

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====


async def notifications_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    settings = await _get_user_settings(update.effective_user.id)

    if not settings:
        await _send_or_edit_message(update, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∞–π—Ç—É")
        return

    message = await _build_settings_message(settings)
    keyboard = _build_settings_keyboard()

    await _send_or_edit_message(update, message, keyboard, parse_mode='Markdown')


async def show_updated_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings = await _get_user_settings(update.effective_user.id)

    if not settings:
        await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω")
        return

    current_time = timezone.now().strftime('%H:%M:%S')
    message = await _build_status_message(settings, current_time)
    keyboard = _build_settings_keyboard()

    await _send_or_edit_message(update, message, keyboard, parse_mode='Markdown')


async def toggle_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await _toggle_setting(update, 'all', "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


async def toggle_morning_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await _toggle_setting(update, 'morning', "–£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


async def toggle_evening_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await _toggle_setting(update, 'evening', "–í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


async def _toggle_setting(update: Update, setting_type, setting_name):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    @sync_to_async
    def toggle_and_save(telegram_id, s_type):
        from nutrition_app.models import TelegramUser, UserNotificationSettings
        try:
            telegram_user = TelegramUser.objects.get(telegram_id=telegram_id)
            settings = UserNotificationSettings.objects.get_or_create(
                user=telegram_user.user)[0]

            if s_type == 'all':
                settings.is_subscribed = not settings.is_subscribed
            elif s_type == 'morning':
                settings.send_morning_reminder = not settings.send_morning_reminder
            elif s_type == 'evening':
                settings.send_evening_reminder = not settings.send_evening_reminder

            settings.save()
            return settings
        except:
            return None

    settings = await toggle_and_save(update.effective_user.id, setting_type)

    if not settings:
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞")
        return

    if setting_type == 'all':
        is_enabled = settings.is_subscribed
    else:
        is_enabled = getattr(settings, f'send_{setting_type}_reminder')

    status = "–í–ö–õ–Æ–ß–ï–ù–´" if is_enabled else "–í–´–ö–õ–Æ–ß–ï–ù–´"

    await update.callback_query.edit_message_text(f"‚úÖ {setting_name} {status}")
    await asyncio.sleep(1)
    await notifications_settings(update, context)

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                              callback_data="today_menu")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                              callback_data="settings")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    await _send_or_edit_message(update, "üçè –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", keyboard)


async def show_site_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ"""
    message = (
        "üåê *–î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É:*\n\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: http://localhost:8000\n"
        "2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å/–≤–æ–π–¥–∏—Ç–µ\n"
        "3. –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n\n"
        "üì± *–°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ*"
    )
    await _send_or_edit_message(update, message, parse_mode='Markdown')


async def open_diary_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫"""
    today = timezone.now().date()
    message = f"üìñ –û—Ç–∫—Ä–æ–π—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ {today.strftime('%d.%m.%Y')} –Ω–∞ —Å–∞–π—Ç–µ"
    await _send_or_edit_message(update, message)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====


async def handle_all_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    handlers = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        "today_menu": show_today_menu,
        "tomorrow_menu": show_tomorrow_menu,
        "open_diary": open_diary_link,
        "open_site_info": show_site_info,
        "help": help_command,
        "main_menu": main_menu,
        "settings": notifications_settings,
        # –ö–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        "toggle_notifications": toggle_notifications,
        "toggle_morning": toggle_morning_reminders,
        "toggle_evening": toggle_evening_reminders,
        "notifications_status": show_updated_status,
    }

    handler = handlers.get(query.data)
    if handler:
        await handler(update, context)

# ===== –°–ï–†–í–ò–°–ù–´–ï –§–£–ù–ö–¶–ò–ò =====


async def _send_or_edit_message(update, message, keyboard=None, **kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup, **kwargs)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup, **kwargs)


@sync_to_async
def _get_user_settings(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from nutrition_app.models import TelegramUser, UserNotificationSettings
    try:
        telegram_user = TelegramUser.objects.get(telegram_id=telegram_id)
        return UserNotificationSettings.objects.get_or_create(user=telegram_user.user)[0]
    except:
        return None


async def _build_settings_message(settings):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    status_icon = "üîî" if settings.is_subscribed else "üîï"
    morning_icon = "‚úÖ" if settings.send_morning_reminder else "‚ùå"
    evening_icon = "‚úÖ" if settings.send_evening_reminder else "‚ùå"

    return (
        f"{status_icon} *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n\n"
        f"*–û–±—â–∏–µ:* {'–í–ö–õ' if settings.is_subscribed else '–í–´–ö–õ'}\n"
        f"*–£—Ç—Ä–µ–Ω–Ω–∏–µ:* {morning_icon}\n"
        f"*–í–µ—á–µ—Ä–Ω–∏–µ:* {evening_icon}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )


async def _build_status_message(settings, current_time):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    return (
        f"üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\nüïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {current_time}\n\n"
        f"*–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n"
        f"‚Ä¢ –û–±—â–∏–µ: {'–í–ö–õ' if settings.is_subscribed else '–í–´–ö–õ'}\n"
        f"‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ: {'–í–ö–õ' if settings.send_morning_reminder else '–í–´–ö–õ'}\n"
        f"‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ: {'–í–ö–õ' if settings.send_evening_reminder else '–í–´–ö–õ'}"
    )


def _build_settings_keyboard():
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return [
        [InlineKeyboardButton(
            "üîî –í–∫–ª/–í—ã–∫–ª –≤—Å–µ", callback_data="toggle_notifications")],
        [InlineKeyboardButton("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ", callback_data="toggle_morning")],
        [InlineKeyboardButton("üåô –í–µ—á–µ—Ä–Ω–∏–µ", callback_data="toggle_evening")],
        [InlineKeyboardButton(
            "üîÑ –°—Ç–∞—Ç—É—Å", callback_data="notifications_status")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
