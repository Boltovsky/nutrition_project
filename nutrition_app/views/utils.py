import random
import re
from decimal import Decimal
from ..models import Recipe


def get_motivational_message(user):
    messages = [
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏! üöÄ",
        f"{user.first_name}, –∫–∞–∂–¥—ã–π —Ç–≤–æ–π —à–∞–≥ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Ç–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ! üí™",
        f"–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫, {user.first_name}! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üåü",
        f"{user.first_name}, –ø–æ–º–Ω–∏: –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º! üìà",
        f"–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º, {user.first_name}! –ì–æ—Ä–¥–∏–º—Å—è —Ç–æ–±–æ–π! üèÜ",
        f"{user.first_name}, —Ç–≤–æ–µ —É–ø–æ—Ä—Å—Ç–≤–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üî•",
        f"–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - —ç—Ç–æ —Ç–≤–æ–π —Å—É–ø–µ—Ä—Å–∏–ª, {user.first_name}! –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –º—É–¥—Ä–æ! ü¶∏‚Äç‚ôÇÔ∏è",
    ]
    return random.choice(messages)


def calculate_user_calories(user):
    """–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö"""
    if user.age and user.weight and user.height:
        # –†–∞—Å—á–µ—Ç BMR (–±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞)
        if user.gender == 'male':
            bmr = (10 * user.weight) + \
                (6.25 * user.height) - (5 * user.age) + 5
        else:
            bmr = (10 * user.weight) + \
                (6.25 * user.height) - (5 * user.age) - 161

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_multipliers = {
            'sedentary': 1.2,
            'light': 1.375,
            'moderate': 1.55,
            'high': 1.725,
            'extreme': 1.9
        }

        # –†–∞—Å—á–µ—Ç —Å—É—Ç–æ—á–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
        daily_calories = bmr * \
            activity_multipliers.get(user.activity_level, 1.2)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
        if user.goal == 'loss':
            daily_calories *= 0.8  # –î–µ—Ñ–∏—Ü–∏—Ç 20%
        elif user.goal == 'gain':
            daily_calories *= 1.1  # –ü—Ä–æ—Ñ–∏—Ü–∏—Ç 10%

        return round(daily_calories)

    return 2000  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def _parse_ingredient_amount(ingredient_text):
    """–ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    patterns = [
        r'(\d+\.?\d*)\s*(–≥|–∫–≥|–º–ª|–ª|—à—Ç|—á\.–ª|—Å—Ç\.–ª|–∑—É–±—á|–ø—É—á–æ–∫|—â–µ–ø–æ—Ç–∫–∞)',
        r'(\d+\.?\d*)\s*–≥—Ä',
        r'(\d+\.?\d*)\s*–≥—Ä–∞–º–º',
        r'(\d+\.?\d*)\s*–º–∏–ª–ª–∏–ª–∏—Ç—Ä',
    ]

    for pattern in patterns:
        match = re.search(pattern, ingredient_text, re.IGNORECASE)
        if match:
            amount = float(match.group(1))
            unit = match.group(2)
            return amount, unit, match.start(), match.end()

    return None, None, None, None


def _adjust_ingredient_amount(ingredient_text, multiplier):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –º–Ω–æ–∂–∏—Ç–µ–ª—é –ø–æ—Ä—Ü–∏–∏"""
    amount, unit, start, end = _parse_ingredient_amount(ingredient_text)

    if amount is not None:
        new_amount = amount * multiplier
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ–ª–∏—á–∏–Ω—ã
        if new_amount < 1:
            new_amount = round(new_amount, 2)
        elif new_amount < 10:
            new_amount = round(new_amount, 1)
        else:
            new_amount = round(new_amount)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        if new_amount.is_integer():
            new_amount = int(new_amount)

        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –Ω–æ–≤–æ–µ
        adjusted_text = (ingredient_text[:start] +
                         f"{new_amount}{unit}" +
                         ingredient_text[end:])
        return adjusted_text

    return ingredient_text


def _adjust_recipe_ingredients(ingredients_text, multiplier):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Ä–µ—Ü–µ–ø—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –º–Ω–æ–∂–∏—Ç–µ–ª—é –ø–æ—Ä—Ü–∏–∏"""
    if multiplier == 1:
        return ingredients_text

    ingredients_list = ingredients_text.split('\n')
    adjusted_ingredients = []

    for ingredient in ingredients_list:
        ingredient = ingredient.strip()
        if ingredient:
            adjusted_ingredient = _adjust_ingredient_amount(
                ingredient, multiplier)
            adjusted_ingredients.append(adjusted_ingredient)

    return '\n'.join(adjusted_ingredients)


def _adjust_portion(recipe, multiplier):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é —Ä–µ—Ü–µ–ø—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π/—É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π –ø–æ—Ä—Ü–∏–µ–π –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏"""
    if isinstance(multiplier, float):
        multiplier = Decimal(str(multiplier))

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    adjusted_ingredients = _adjust_recipe_ingredients(
        recipe.ingredients, float(multiplier))

    adjusted_recipe = Recipe(
        id=recipe.id,
        name=recipe.name,
        meal_type=recipe.meal_type,
        calories=round(recipe.calories * multiplier),
        protein=round(recipe.protein * multiplier, 1),
        fat=round(recipe.fat * multiplier, 1),
        carbs=round(recipe.carbs * multiplier, 1),
        ingredients=adjusted_ingredients,
        instructions=recipe.instructions,
        image=recipe.image,
        cooking_time=recipe.cooking_time,
        difficulty=recipe.difficulty,
        base_portion=f"{float(multiplier):.1f} –ø–æ—Ä—Ü–∏–∏" if multiplier != Decimal(
            '1') else "1 –ø–æ—Ä—Ü–∏—è"
    )

    adjusted_recipe.portion_multiplier = float(multiplier)
    adjusted_recipe.original_calories = recipe.calories
    adjusted_recipe.original_ingredients = recipe.ingredients
    return adjusted_recipe


def _select_recipe_for_meal(meal_type, target_calories, used_recipe_ids=None):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, —Å—Ç–∞—Ä–∞—è—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏"""
    if used_recipe_ids is None:
        used_recipe_ids = set()

    recipes = list(Recipe.objects.filter(
        meal_type=meal_type).exclude(id__in=used_recipe_ids))

    if not recipes:
        return None, used_recipe_ids

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ –∫–∞–ª–æ—Ä–∏—è–º (¬±10%)
    perfect_match = [
        recipe for recipe in recipes
        if abs(recipe.calories - target_calories) <= target_calories * 0.1
    ]

    if perfect_match:
        selected_recipe = random.choice(perfect_match)
        used_recipe_ids.add(selected_recipe.id)
        return selected_recipe, used_recipe_ids

    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
    recipes_sorted = sorted(
        recipes, key=lambda x: abs(x.calories - target_calories))

    # –ë–µ—Ä–µ–º 3 —Å–∞–º—ã—Ö –±–ª–∏–∑–∫–∏—Ö –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —Ä–µ—Ü–µ–ø—Ç–∞
    closest_recipes = recipes_sorted[:3]

    if closest_recipes:
        selected_recipe = random.choice(closest_recipes)
        used_recipe_ids.add(selected_recipe.id)
        return selected_recipe, used_recipe_ids

    return None, used_recipe_ids


def _optimize_day_with_portions(breakfast_target, lunch_target, snack_target, dinner_target, max_attempts=30):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ—Ä—Ü–∏–π"""
    total_target = breakfast_target + lunch_target + snack_target + dinner_target

    for attempt in range(max_attempts):
        # –ü–æ–¥–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
        breakfast, used_ids = _select_recipe_for_meal(
            'breakfast', breakfast_target)
        lunch, used_ids = _select_recipe_for_meal(
            'lunch', lunch_target, used_ids)
        snack, used_ids = _select_recipe_for_meal(
            'snack', snack_target, used_ids)
        dinner, used_ids = _select_recipe_for_meal(
            'dinner', dinner_target, used_ids)

        if not all([breakfast, lunch, snack, dinner]):
            continue

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
        current_calories = (
            float(breakfast.calories) +
            float(lunch.calories) +
            float(snack.calories) +
            float(dinner.calories)
        )

        # –ï—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª–∏–∑–∫–∞ –∫ —Ü–µ–ª–∏ (¬±5%), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if abs(current_calories - total_target) <= total_target * 0.05:
            return breakfast, lunch, snack, dinner, current_calories

        # –ï—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä—Ü–∏–∏
        if current_calories < total_target:
            deficit = total_target - current_calories

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ—Ñ–∏—Ü–∏—Ç –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏—Ö —Ü–µ–ª–µ–≤–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
            meal_targets = [breakfast_target,
                            lunch_target, snack_target, dinner_target]
            meals = [breakfast, lunch, snack, dinner]
            meal_names = ['breakfast', 'lunch', 'snack', 'dinner']

            total_meal_target = sum(meal_targets)

            for i, (meal, meal_target) in enumerate(zip(meals, meal_targets)):
                if meal_target > 0:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–º—É –ø—Ä–∏–µ–º—É –ø–∏—â–∏
                    meal_share = meal_target / total_meal_target
                    additional_calories_needed = deficit * meal_share

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Ä—Ü–∏–∏
                    if float(meal.calories) > 0:
                        portion_multiplier = 1 + \
                            (additional_calories_needed / float(meal.calories))

                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–∏ (–Ω–µ –±–æ–ª–µ–µ 2x)
                        portion_multiplier = min(portion_multiplier, 2.0)

                        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç
                        meals[i] = _adjust_portion(meal, portion_multiplier)

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
            adjusted_calories = sum(float(meal.calories) for meal in meals)

            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º—ã –±–ª–∏–∑–∫–∏ –∫ —Ü–µ–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if abs(adjusted_calories - total_target) <= total_target * 0.1:
                return meals[0], meals[1], meals[2], meals[3], adjusted_calories

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    return breakfast, lunch, snack, dinner, current_calories


def _smart_portion_adjustment(breakfast, lunch, snack, dinner, total_target):
    """–£–º–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ü–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"""
    meals = [breakfast, lunch, snack, dinner]
    current_calories = sum(float(meal.calories) for meal in meals)

    # –ï—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —É–∂–µ –±–ª–∏–∑–∫–∞, –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
    if abs(current_calories - total_target) <= total_target * 0.02:
        return breakfast, lunch, snack, dinner, current_calories

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
    adjustment_factor = total_target / current_calories if current_calories > 0 else 1

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (0.8 - 1.5)
    adjustment_factor = max(0.8, min(adjustment_factor, 1.5))

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –∫–æ –≤—Å–µ–º –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    adjusted_meals = []
    for meal in meals:
        adjusted_meal = _adjust_portion(meal, adjustment_factor)
        adjusted_meals.append(adjusted_meal)

    adjusted_calories = sum(float(meal.calories) for meal in adjusted_meals)

    return adjusted_meals[0], adjusted_meals[1], adjusted_meals[2], adjusted_meals[3], adjusted_calories


def generate_optimized_weekly_meal_plan(daily_calories):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ—Ä—Ü–∏–π"""
    days_of_week = ['monday', 'tuesday', 'wednesday',
                    'thursday', 'friday', 'saturday', 'sunday']
    weekly_plan = {}

    # –ì–∏–±–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏
    distributions = [
        (0.25, 0.35, 0.15, 0.25),  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
        (0.30, 0.30, 0.15, 0.25),  # –±–æ–ª—å—à–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫
        (0.25, 0.40, 0.10, 0.25),  # –±–æ–ª—å—à–µ –Ω–∞ –æ–±–µ–¥
        (0.20, 0.35, 0.20, 0.25),  # –±–æ–ª—å—à–µ –ø–µ—Ä–µ–∫—É—Å–æ–≤
    ]

    for i, day in enumerate(days_of_week):
        # –ß–µ—Ä–µ–¥—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        distribution = distributions[i % len(distributions)]

        breakfast_target = int(daily_calories * distribution[0])
        lunch_target = int(daily_calories * distribution[1])
        snack_target = int(daily_calories * distribution[2])
        dinner_target = int(daily_calories * distribution[3])

        total_target = breakfast_target + lunch_target + snack_target + dinner_target

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
        breakfast, lunch, snack, dinner, total_calories = _optimize_day_with_portions(
            breakfast_target, lunch_target, snack_target, dinner_target
        )

        # –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—á–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –ø–æ—Ä—Ü–∏–π
        breakfast, lunch, snack, dinner, total_calories = _smart_portion_adjustment(
            breakfast, lunch, snack, dinner, total_target
        )

        weekly_plan[day] = {
            'breakfast_id': breakfast.id if breakfast else None,
            'lunch_id': lunch.id if lunch else None,
            'snack_id': snack.id if snack else None,
            'dinner_id': dinner.id if dinner else None,
            'total_calories': total_calories,
            'target_calories': daily_calories,
            'breakfast_multiplier': getattr(breakfast, 'portion_multiplier', 1.0),
            'lunch_multiplier': getattr(lunch, 'portion_multiplier', 1.0),
            'snack_multiplier': getattr(snack, 'portion_multiplier', 1.0),
            'dinner_multiplier': getattr(dinner, 'portion_multiplier', 1.0),
        }

    return weekly_plan


def _get_recipe_from_session(recipe_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –ø–æ ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if recipe_id is None:
        return _create_dummy_recipe("–†–µ—Ü–µ–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    try:
        return Recipe.objects.get(id=recipe_id)
    except Recipe.DoesNotExist:
        return _create_dummy_recipe("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


def _create_dummy_recipe(name):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    return Recipe(
        name=name,
        calories=0,
        protein=0,
        fat=0,
        carbs=0,
        cooking_time=0,
        difficulty='easy',
        ingredients="–†–µ—Ü–µ–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        instructions="–û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã —Ä–µ—Ü–µ–ø—Ç–æ–≤",
        base_portion="1 –ø–æ—Ä—Ü–∏—è"
    )
